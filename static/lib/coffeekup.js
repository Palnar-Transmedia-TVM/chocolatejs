// Generated by CoffeeScript 1.9.2
(function() {
  var cache, coffee, coffeekup, coffeescript_helpers, elements, merge_elements, skeleton, stringify,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    hasProp = {}.hasOwnProperty,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== "undefined" && window !== null) {
    coffeekup = window[window.exports != null ? "exports" : "Coffeekup"] = {};
    coffee = typeof CoffeeScript !== "undefined" && CoffeeScript !== null ? CoffeeScript : null;
  } else {
    coffeekup = exports;
    coffee = require('coffee-script');
  }

  coffeekup.version = '0.3.1edge';

  coffeekup.doctypes = {
    'default': '<!DOCTYPE html>',
    '5': '<!DOCTYPE html>',
    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
    'ce': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
  };

  coffeescript_helpers = "var __slice = slice = Array.prototype.slice;\nvar __hasProp = hasProp = Object.prototype.hasOwnProperty;\nvar __bind = bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\nvar __extends = extend = function(child, parent) {\n  for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype;\n  return child; };\nvar __indexOf = indexOf = Array.prototype.indexOf || function(item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (this[i] === item) return i;\n  } return -1; };".replace(/\n/g, '');

  elements = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button canvas caption cite code colgroup datalist dd del details dfn div dl dt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins kbd label legend li map mark menu meter nav noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small span strong style sub summary sup table tbody td textarea tfoot th thead time title tr u ul video',
    "void": 'area base br col command embed hr img input keygen link meta param source track wbr',
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing nextid noembed plaintext rb strike xmp big blink center font marquee multicol nobr spacer tt',
    obsolete_void: 'basefont frame'
  };

  merge_elements = function() {
    var a, args, element, j, l, len, len1, ref, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = [];
    for (j = 0, len = args.length; j < len; j++) {
      a = args[j];
      ref = elements[a].split(' ');
      for (l = 0, len1 = ref.length; l < len1; l++) {
        element = ref[l];
        if (indexOf.call(result, element) < 0) {
          result.push(element);
        }
      }
    }
    return result;
  };

  coffeekup.tags = merge_elements('regular', 'obsolete', 'void', 'obsolete_void');

  coffeekup.self_closing = merge_elements('void', 'obsolete_void');

  skeleton = function(__data) {
    var __ck, coffeescript, comment, doctype, h, id, ie, tag, text, totext;
    if (__data == null) {
      __data = {};
    }
    if (__data.format == null) {
      __data.format = false;
    }
    if (__data.autoescape == null) {
      __data.autoescape = false;
    }
    __ck = {
      buffer: [],
      esc: function(txt) {
        if (__data.autoescape) {
          return h(txt);
        } else {
          return String(txt);
        }
      },
      tabs: 0,
      repeat: function(string, count) {
        return Array(count + 1).join(string);
      },
      indent: function() {
        if (__data.format) {
          return text(this.repeat('  ', this.tabs));
        }
      },
      tag: function(name, args) {
        var combo, i, j, len;
        combo = [name];
        for (j = 0, len = args.length; j < len; j++) {
          i = args[j];
          combo.push(i);
        }
        return tag.apply(__data, combo);
      },
      render_idclass: function(str) {
        var c, classes, i, id, j, l, len, len1, ref;
        classes = [];
        ref = str.split('.');
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          if (indexOf.call(i, '#') >= 0) {
            id = i.replace('#', '');
          } else {
            if (i !== '') {
              classes.push(i);
            }
          }
        }
        if (id) {
          text(" id=\"" + id + "\"");
        }
        if (classes.length > 0) {
          text(" class=\"");
          for (l = 0, len1 = classes.length; l < len1; l++) {
            c = classes[l];
            if (c !== classes[0]) {
              text(' ');
            }
            text(c);
          }
          return text('"');
        }
      },
      render_attrs: function(obj, prefix) {
        var k, results, v;
        if (prefix == null) {
          prefix = '';
        }
        results = [];
        for (k in obj) {
          v = obj[k];
          if (typeof v === 'boolean' && v) {
            v = k;
          }
          if (typeof v === 'function') {
            v = "(" + v + ").call(this);";
          }
          if ((v != null) && typeof v === 'object' && !(v instanceof Array)) {
            results.push(this.render_attrs(v, prefix + k + '-'));
          } else if ((v != null) && v !== false) {
            results.push(text(" " + (prefix + k) + "=\"" + (this.esc(v)) + "\""));
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      render_contents: function(contents) {
        var result;
        switch (typeof contents) {
          case 'string':
          case 'number':
          case 'boolean':
            return text(this.esc(contents));
          case 'function':
            if (__data.format) {
              text('\n');
            }
            this.tabs++;
            result = contents.call(__data);
            if (typeof result === 'string') {
              this.indent();
              text(this.esc(result));
              if (__data.format) {
                text('\n');
              }
            }
            this.tabs--;
            return this.indent();
        }
      },
      render_tag: function(name, idclass, attrs, contents) {
        if (__ck.buffer[__ck.buffer.length - 1] === "\n") {
          this.indent();
        }
        text("<" + name);
        if (idclass) {
          this.render_idclass(idclass);
        }
        if (attrs) {
          this.render_attrs(attrs);
        }
        if (indexOf.call(this.self_closing, name) >= 0) {
          text(' />');
          if (__data.format) {
            text('\n');
          }
        } else {
          text('>');
          this.render_contents(contents);
          text("</" + name + ">");
          if (__data.format) {
            text('\n');
          }
        }
        return null;
      }
    };
    tag = function() {
      var a, args, attrs, contents, idclass, j, len, name;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (j = 0, len = args.length; j < len; j++) {
        a = args[j];
        switch (typeof a) {
          case 'function':
            contents = a;
            break;
          case 'object':
            attrs = a;
            break;
          case 'number':
          case 'boolean':
            contents = a;
            break;
          case 'string':
            if (args.length === 1) {
              if (args[0][0] !== '.' || args[0].indexOf(' ') >= 0) {
                contents = a;
              } else {
                idclass = a;
                contents = null;
              }
            } else {
              if (a === args[0]) {
                idclass = a;
              } else {
                contents = a;
              }
            }
        }
      }
      return __ck.render_tag(name, idclass, attrs, contents);
    };
    id = function(db, value) {
      var ids, j, key, len;
      if (typeof db === 'string') {
        value = db;
        db = null;
      }
      if (typeof value === 'string') {
        ids = db != null ? db : {};
        for (j = 0, len = arguments.length; j < len; j++) {
          key = arguments[j];
          ids[key] = id();
        }
        return ids;
      }
      if ((value != null) && typeof value === "number") {
        __data.id(parseInt(value));
      }
      return '_' + __data.id();
    };
    id.ids = function() {
      var _ids, ids;
      _ids = {};
      ids = function(value) {
        var ref;
        if (value == null) {
          return _ids;
        }
        return (ref = _ids[value]) != null ? ref : _ids[value] = id();
      };
      ids.toJSONString = function() {
        return "(function (key) {\n    var _ids = " + (JSON.stringify(_ids)) + ";\n    return _ids[key];\n})";
      };
      return ids;
    };
    id.classes = function() {
      var _classes, classes;
      _classes = {};
      classes = function(value) {
        var ref, ref1;
        if (value == null) {
          return _classes;
        }
        return (ref = _ids[value]) != null ? ref : _ids[value] = value.substr(0, (ref1 = id.classes.size) != null ? ref1 : 0) + '_' + id();
      };
      classes.toJSONString = function() {
        return "(function (key) {\n    var _classes = " + (JSON.stringify(_classes)) + ";\n    return _classes[key];\n})";
      };
      return classes;
    };
    totext = function(func) {
      var old_buffer, temp_buffer;
      temp_buffer = [];
      old_buffer = __ck.buffer;
      __ck.buffer = temp_buffer;
      func();
      __ck.buffer = old_buffer;
      return temp_buffer.join('');
    };
    h = function(txt) {
      return String(txt).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };
    doctype = function(type) {
      if (type == null) {
        type = 'default';
      }
      text(__ck.doctypes[type]);
      if (__data.format) {
        return text('\n');
      }
    };
    text = function(txt) {
      __ck.buffer.push(String(txt));
      return null;
    };
    comment = function(cmt) {
      text("<!--" + cmt + "-->");
      if (__data.format) {
        return text('\n');
      }
    };
    coffeescript = function(param, func) {
      var k, v;
      if (func) {
        script((__ck.coffeescript_helpers + "\n(function() {var ") + ((function() {
          var results;
          results = [];
          for (k in param) {
            v = param[k];
            results.push((k + "=") + (typeof v === 'function' ? (v.toJSONString != null ? v.toJSONString() : "" + (v.toString())) : JSON.stringify(v)));
          }
          return results;
        })()).join(',') + ";\n" + ("(" + func + ").call(this);}).call(this);"));
        return __ck.coffeescript_helpers = "";
      } else {
        switch (typeof param) {
          case 'function':
            script(__ck.coffeescript_helpers + "(" + param + ").call(this);");
            return __ck.coffeescript_helpers = "";
          case 'string':
            return script({
              type: 'text/coffeescript'
            }, function() {
              return param;
            });
          case 'object':
            param.type = 'text/coffeescript';
            return script(param);
        }
      }
    };
    ie = function(condition, contents) {
      __ck.indent();
      text("<!--[if " + condition + "]>");
      __ck.render_contents(contents);
      text("<![endif]-->");
      if (__data.format) {
        return text('\n');
      }
    };
    return null;
  };

  skeleton = String(skeleton).replace(/function\s*\(.*\)\s*\{/, '').replace(/return null;\s*\}$/, '');

  skeleton = coffeescript_helpers + skeleton;

  stringify = function() {
    var doit;
    doit = function(o) {
      var k, result, v;
      result = [];
      result.push((function() {
        switch (Object.prototype.toString.apply(o)) {
          case '[object Object]':
            return "{" + (((function() {
              var results;
              results = [];
              for (k in o) {
                if (!hasProp.call(o, k)) continue;
                v = o[k];
                results.push(k + ':' + doit(v));
              }
              return results;
            })()).join(',')) + "}";
          case '[object Array]':
            return "function () {var a = []; var o = {" + (((function() {
              var results;
              results = [];
              for (k in o) {
                if (!hasProp.call(o, k)) continue;
                v = o[k];
                results.push(k + ':' + doit(v));
              }
              return results;
            })()).join(',')) + "};for (var k in o) {a[k] = o[k];} return a; }()";
          case '[object Boolean]':
            return o;
          case '[object Number]':
            return o;
          case '[object Date]':
            return "new Date(" + (o.valueOf()) + ")";
          case '[object Function]':
            return "function(){return (" + (o.toString()) + ").apply(__data, arguments);}";
          case '[object Math]':
            return 'Math';
          case '[object String]':
            return "'" + (o.replace(/\'/g, '\\\'')) + "'";
          case '[object Undefined]':
            return 'void 0';
          case '[object Null]':
            return 'null';
        }
      })());
      return result;
    };
    return doit(arguments[0]).join(', ');
  };

  coffeekup.compile = function(template, options) {
    var code, hardcoded_locals, j, k, l, len, len1, ref, ref1, t, tag_functions, tags_used, v;
    if (options == null) {
      options = {};
    }
    if (typeof template === 'function') {
      template = String(template);
    } else if (typeof template === 'string' && (coffee != null)) {
      template = coffee.compile(template, {
        bare: true
      });
      template = "function(){" + template + "}";
    }
    hardcoded_locals = '';
    if (options.hardcode) {
      ref = options.hardcode;
      for (k in ref) {
        v = ref[k];
        if (!(options.document && typeof v === 'function')) {
          hardcoded_locals += "var " + k + " = " + (stringify(v)) + ";";
        } else {
          hardcoded_locals += "var " + k + " = function() { return (" + (stringify(v)) + ").apply(this.bin ? this : __data.document, arguments) };";
        }
      }
    }
    tag_functions = '';
    tags_used = [];
    ref1 = coffeekup.tags;
    for (j = 0, len = ref1.length; j < len; j++) {
      t = ref1[j];
      if (options.all_tags || template.indexOf(t) > -1 || hardcoded_locals.indexOf(t) > -1) {
        tags_used.push(t);
      }
    }
    tag_functions += "var " + (tags_used.join(',')) + ";";
    for (l = 0, len1 = tags_used.length; l < len1; l++) {
      t = tags_used[l];
      tag_functions += t + " = function(){return __ck.tag('" + t + "', arguments);};";
    }
    code = tag_functions + hardcoded_locals + skeleton;
    code += "__ck.doctypes = " + (JSON.stringify(coffeekup.doctypes)) + ";";
    code += "__ck.coffeescript_helpers = " + (JSON.stringify(coffeescript_helpers)) + ";";
    code += "__ck.self_closing = " + (JSON.stringify(coffeekup.self_closing)) + ";";
    if (options.locals) {
      code += 'with(__data.locals){';
    }
    code += ("(" + template + ").call(__data") + (options.bin != null ? ", __data.bin" : '') + ");";
    if (options.locals) {
      code += '}';
    }
    code += "return __ck.buffer.join('');";
    return new Function('__data', code);
  };

  cache = {};

  coffeekup.render = function(template, data, options) {
    var k, tpl, v;
    if (data == null) {
      data = {};
    }
    if (options == null) {
      options = {};
    }
    for (k in options) {
      v = options[k];
      data[k] = v;
    }
    if (data.cache == null) {
      data.cache = false;
    }
    data.id = (function() {
      var api, base, blockSize, c, discreteValues, pad, randomBlock, safeCounter;
      c = 0;
      blockSize = 4;
      base = 36;
      discreteValues = Math.pow(base, blockSize);
      pad = function(num, size) {
        var s;
        s = '000000000' + num;
        return s.substr(s.length - size);
      };
      randomBlock = function() {
        return pad((Math.random() * discreteValues << 0).toString(base), blockSize);
      };
      safeCounter = function() {
        c = c < discreteValues ? c : 0;
        c++;
        return c - 1;
      };
      api = function() {
        var counter, fingerprint, letter, random, timestamp;
        letter = 'c';
        timestamp = (new Date).getTime().toString(base);
        counter = void 0;
        fingerprint = api.fingerprint();
        random = randomBlock() + randomBlock();
        counter = pad(safeCounter().toString(base), blockSize);
        return letter + timestamp + counter + fingerprint + random;
      };
      api.slug = function() {
        var counter, date, print, random;
        date = (new Date).getTime().toString(36);
        counter = void 0;
        print = api.fingerprint().slice(0, 1) + api.fingerprint().slice(-1);
        random = randomBlock().slice(-2);
        counter = safeCounter().toString(36).slice(-4);
        return date.slice(-2) + counter + print + random;
      };
      api.globalCount = typeof window === "undefined" || window === null ? void 0 : function() {
        cache = (function() {
          var count, i;
          i = void 0;
          count = 0;
          for (i in window) {
            count++;
          }
          return count;
        })();
        api.globalCount = function() {
          return cache;
        };
        return cache;
      };
      api.fingerprint = typeof window !== "undefined" && window !== null ? function() {
        return pad((navigator.mimeTypes.length + navigator.userAgent.length).toString(36) + api.globalCount().toString(36), 4);
      } : function() {
        var hostId, hostname, length, os, padding, pid;
        os = require('os');
        padding = 2;
        pid = pad(process.pid.toString(36), padding);
        hostname = os.hostname();
        length = hostname.length;
        hostId = pad(hostname.split('').reduce((function(prev, char) {
          return +prev + char.charCodeAt(0);
        }), +length + 36).toString(36), padding);
        return pid + hostId;
      };
      return api;
    })();
    if (data.cache && (cache[template] != null)) {
      tpl = cache[template];
    } else if (data.cache) {
      tpl = cache[template] = coffeekup.compile(template, data);
    } else {
      tpl = coffeekup.compile(template, data);
    }
    return tpl(data);
  };

  if (typeof window === "undefined" || window === null) {
    coffeekup.adapters = {
      simple: coffeekup.render,
      meryl: coffeekup.render,
      express: {
        TemplateError: (function(superClass) {
          extend(_Class, superClass);

          function _Class(message) {
            this.message = message;
            Error.call(this, this.message);
            Error.captureStackTrace(this, arguments.callee);
          }

          _Class.prototype.name = 'TemplateError';

          return _Class;

        })(Error),
        compile: function(template, data) {
          var TemplateError, e, tpl;
          if (data.hardcode == null) {
            data.hardcode = {};
          }
          data.hardcode.partial = function() {
            return text(this.partial.apply(this, arguments));
          };
          TemplateError = this.TemplateError;
          try {
            tpl = coffeekup.compile(template, data);
          } catch (_error) {
            e = _error;
            throw new TemplateError("Error compiling " + data.filename + ": " + e.message);
          }
          return function() {
            try {
              return tpl.apply(null, arguments);
            } catch (_error) {
              e = _error;
              throw new TemplateError("Error rendering " + data.filename + ": " + e.message);
            }
          };
        }
      }
    };
  }

}).call(this);
